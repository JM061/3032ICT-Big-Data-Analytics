setwd("C:/Users/Jacob/Documents/UNI CODE/3032ICT-Big-Data-Analytics/3032ICT Assignment 1")
library(vosonSML)
library(igraph)
library(dplyr)
library(textclean)
library(tidytext)
library(tidyr)
library(tm)
# Set up YouTube authentication variables
my_youtube_api_key <- "AIzaSyA_FCkrPxhbytLzMMFyV2KyPpZw0d1Ne3M"
load("~/UNI CODE/3032ICT-Big-Data-Analytics/3032ICT Assignment 1/Final Data/Youtube Data/Youtube Data Collection (In Progress).RData")
library(vosonSML)
library(igraph)
library(dplyr)
library(textclean)
library(tidytext)
library(tidyr)
library(tm)
# Set up YouTube authentication variables
my_youtube_api_key <- "AIzaSyA_FCkrPxhbytLzMMFyV2KyPpZw0d1Ne3M"
# Authenticate to YouTube and collect data
yt_auth <- Authenticate("youtube", apiKey = my_youtube_api_key)
video_url <- c("https://www.youtube.com/watch?v=y83x7MgzWOA",
"https://www.youtube.com/watch?v=JGwWNGJdvx8",
"https://www.youtube.com/watch?v=lp-EO5I60KA",
"https://www.youtube.com/watch?v=2Vv-BfVoq4g")
yt_data <- yt_auth |> Collect(videoIDs = video_url,
maxComments = 500,
writeToFile = TRUE,
verbose = TRUE) # use 'verbose' to show download progress
yt_data <- yt_auth |> Collect(videoIDs = video_url,
maxComments = 750,
writeToFile = TRUE,
verbose = TRUE) # use 'verbose' to show download progress
# Create actor network
yt_actor_network <- yt_data |>
Create("actor") |>
AddText(yt_data,
repliesFromText = TRUE,
verbose = TRUE) |>
AddVideoData(yt_auth,
actorSubOnly = TRUE,
verbose = TRUE)
# Create graph from the network and change IDs to screen names
yt_actor_graph <- yt_actor_network |> Graph()
yt_actor_graph
V(yt_actor_graph)$name <- V(yt_actor_graph)$screen_name
yt_actor_graph
# Save and write graph to file
saveRDS(yt_actor_graph, file = "YouTubeActor.rds")
write_graph(yt_actor_graph, file = "YouTubeActor.graphml", format = "graphml")
save.image("~/UNI CODE/3032ICT-Big-Data-Analytics/3032ICT Assignment 1/Final Data/Youtube Data/Youtube Semantic Graphs In Progress.RData")
